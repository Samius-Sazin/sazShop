generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema create
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  image        String?
  isSubscribed Boolean  @default(false)
  customerId   String?  @unique //stripe customer id
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  subscription Subscription? //one to one relation
  orders       Order[] //one to many relation
  comments     Comment[]
  likes        Like[]
}

model Post {
  id        String  @id @default(cuid())
  mediaUrl  String?
  mediaType String?
  text      String
  userId    String
  likes     Int     @default(0)
  isPublic  Boolean @default(false)
  // createdAt DateTime @default(now())

  comments  Comment[]
  likesList Like[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  userId    String
  postId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([postId])
  @@index([userId])
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String

  User User @relation(fields: [userId], references: [id])
  Post Post @relation(fields: [postId], references: [id])

  @@index([postId])
  @@index([userId])
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  planId    String
  price     Int      @default(0)
  startDate DateTime @default(now())
  endDate   DateTime

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Product {
  id         String  @id @default(cuid())
  name       String
  image      String
  price      Int
  isArchived Boolean @default(false)

  orders Order[]
}

model ShippingAddress {
  id         String  @id @default(cuid())
  address    String
  city       String
  state      String?
  postalCode String
  country    String

  orders Order[]
}

model Order {
  id                String   @id @default(cuid())
  userId            String
  productId         String
  size              String
  price             Int
  shippingAddressId String?
  isPaid            Boolean  @default(false)
  orderDate         DateTime @default(now())

  user            User             @relation(fields: [userId], references: [id])
  product         Product          @relation(fields: [productId], references: [id])
  shippingAddress ShippingAddress? @relation(fields: [shippingAddressId], references: [id])

  @@index([userId])
  @@index([productId])
}
